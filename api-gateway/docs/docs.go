// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/contract/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Create Contract",
                "parameters": [
                    {
                        "description": "Contract details",
                        "name": "contract",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.CreateContractRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract created successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ContractResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while creating contract",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/contract/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a contract by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Delete Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contract ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ContractResponse"
                        }
                    },
                    "404": {
                        "description": "Contract not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while deleting contract",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/contract/get/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a contract by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Get Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contract ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract details",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetContractResponse"
                        }
                    },
                    "404": {
                        "description": "Contract not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving contract",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/contract/getpdf/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a contract by ID and return it in PDF format",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/pdf"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Get Contract",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contract ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "404": {
                        "description": "Contract not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving contract",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/contract/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of contracts with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "List Contracts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by consumer name",
                        "name": "consumer_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by status",
                        "name": "status",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Filter by passport seria",
                        "name": "pasport_seria",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of contracts",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetAllContractResponse"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving contracts",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/contract/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing contract",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Contract"
                ],
                "summary": "Update Contract",
                "parameters": [
                    {
                        "description": "Updated contract details",
                        "name": "contract",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.UpdateContractRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Contract updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ContractResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while updating contract",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/exchange/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new exchange record with the specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Create a new Exchange",
                "parameters": [
                    {
                        "enum": [
                            "buy",
                            "sell"
                        ],
                        "type": "string",
                        "description": "Exchange Status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Exchange details",
                        "name": "exchange",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.CreateExchangeRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange created successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while creating exchange",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/exchange/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific exchange record using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Delete Exchange by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ExchangeResponse"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while deleting exchange",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/exchange/get/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific exchange record using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Get Exchange by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Exchange ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetExchangeResponse"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving exchange",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/exchange/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all exchange records with optional filtering by product ID or status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "List all Exchanges",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "product_id",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "buy",
                            "sell"
                        ],
                        "type": "string",
                        "description": "Exchange Status",
                        "name": "status",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of exchanges retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetAllExchangeResponse"
                        }
                    },
                    "500": {
                        "description": "Error while listing exchanges",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/exchange/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing exchange record with new details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Exchange"
                ],
                "summary": "Update an Exchange",
                "parameters": [
                    {
                        "description": "Exchange details",
                        "name": "exchange",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.UpdateExchangeRequest"
                        }
                    },
                    {
                        "enum": [
                            "buy",
                            "sell"
                        ],
                        "type": "string",
                        "description": "Exchange Status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Exchange updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ExchangeResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Exchange not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while updating exchange",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/minio/upload": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Upload a file to MinIO",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "MinIO"
                ],
                "summary": "Upload File",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Filename",
                        "name": "filename",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.UploadFileResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while uploading file",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create Product",
                "parameters": [
                    {
                        "description": "Product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while creating product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/delete/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ProductResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while deleting product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/get/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a product by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Get Product",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetProductResponse"
                        }
                    },
                    "404": {
                        "description": "Product not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of products with optional filters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "List Products",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Product Name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product Color",
                        "name": "color",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Product Model",
                        "name": "model",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Storage ID",
                        "name": "storage_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetAllProductResponse"
                        }
                    },
                    "500": {
                        "description": "Error while listing products",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/product/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update Product",
                "parameters": [
                    {
                        "description": "Updated product details",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while updating product",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/storage/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new storage record with the specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Create a new Storage",
                "parameters": [
                    {
                        "description": "Storage details",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.CreateStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage created successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.StorageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while creating storage",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/storage/delete": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a specific storage record using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Delete Storage by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.StorageResponse"
                        }
                    },
                    "404": {
                        "description": "Storage not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while deleting storage",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/storage/get/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a specific storage record using its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Get Storage by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetStorageResponse"
                        }
                    },
                    "404": {
                        "description": "Storage not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving storage",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/storage/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve a list of all storage records with optional filtering by name or user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "List all Storages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Storage name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of storages retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetAllStorageResponse"
                        }
                    },
                    "500": {
                        "description": "Error while listing storages",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/storage/update": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing storage record with new details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Storage"
                ],
                "summary": "Update a Storage",
                "parameters": [
                    {
                        "description": "Storage details",
                        "name": "storage",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.UpdateStorageRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Storage updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.StorageResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Storage not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while updating storage",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction/check": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Check all pending transactions and return a message if any payments are due this month",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transactions"
                ],
                "summary": "Check Transactions",
                "responses": {
                    "200": {
                        "description": "Payments due this month",
                        "schema": {
                            "$ref": "#/definitions/genprotos.CheckResponse"
                        }
                    },
                    "500": {
                        "description": "Error while checking transactions",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction/create": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Create a new transaction record with the specified details",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Create a new Transaction",
                "parameters": [
                    {
                        "description": "Transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.CreateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction created successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while creating transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction/list": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "List all transactions, optionally filtered by contract ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "List Transactions",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Contract ID",
                        "name": "contract_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of transactions",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetAllTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while listing transactions",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/transaction/{id}": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieve transaction details by transaction ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Get Transaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction details",
                        "schema": {
                            "$ref": "#/definitions/genprotos.GetTransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while retrieving transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Update an existing transaction record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Update Transaction",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated transaction details",
                        "name": "transaction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/genprotos.UpdateTransactionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction updated successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while updating transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Delete a transaction record by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Transaction"
                ],
                "summary": "Delete Transaction by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Transaction ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Transaction deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/genprotos.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Transaction not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error while deleting transaction",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "genprotos.CheckResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.ContractResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "genprotos.CreateContractRequest": {
            "type": "object",
            "properties": {
                "consumer_address": {
                    "type": "string"
                },
                "consumer_name": {
                    "type": "string"
                },
                "consumer_passport_serial": {
                    "type": "string"
                },
                "consumer_phone_number": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "passport_image": {
                    "type": "string"
                },
                "status": {
                    "description": "Enum: pending, finished, canceled",
                    "type": "string"
                }
            }
        },
        "genprotos.CreateExchangeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "contract_id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "status": {
                    "description": "Enum: buy, sell",
                    "type": "string"
                }
            }
        },
        "genprotos.CreateProductRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "date_of_creation": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "made_in": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storage_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.CreateStorageRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.CreateTransactionRequest": {
            "type": "object",
            "properties": {
                "contract_id": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "genprotos.ExchangeResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "genprotos.GetAllContractResponse": {
            "type": "object",
            "properties": {
                "all_contracts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.GetContractResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetAllExchangeResponse": {
            "type": "object",
            "properties": {
                "all_exchanges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.GetExchangeResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetAllProductResponse": {
            "type": "object",
            "properties": {
                "all_products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.GetProductResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetAllStorageResponse": {
            "type": "object",
            "properties": {
                "all_storages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.GetStorageResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetAllTransactionResponse": {
            "type": "object",
            "properties": {
                "all_transactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/genprotos.GetTransactionResponse"
                    }
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetContractResponse": {
            "type": "object",
            "properties": {
                "consumer_address": {
                    "type": "string"
                },
                "consumer_name": {
                    "type": "string"
                },
                "consumer_passport_serial": {
                    "type": "string"
                },
                "consumer_phone_number": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "passport_image": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetExchangeResponse": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "contract_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetProductResponse": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "date_of_creation": {
                    "type": "string"
                },
                "deleted_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "made_in": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storage_id": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetStorageResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.GetTransactionResponse": {
            "type": "object",
            "properties": {
                "contract_id": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "genprotos.ProductResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "genprotos.StorageResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "genprotos.TransactionResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "genprotos.UpdateContractRequest": {
            "type": "object",
            "properties": {
                "consumer_address": {
                    "type": "string"
                },
                "consumer_name": {
                    "type": "string"
                },
                "consumer_passport_serial": {
                    "type": "string"
                },
                "consumer_phone_number": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "passport_image": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "genprotos.UpdateExchangeRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "contract_id": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "product_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "genprotos.UpdateProductRequest": {
            "type": "object",
            "properties": {
                "color": {
                    "type": "string"
                },
                "date_of_creation": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "made_in": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "storage_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.UpdateStorageRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "genprotos.UpdateTransactionRequest": {
            "type": "object",
            "properties": {
                "contract_id": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "genprotos.UploadFileResponse": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "API Gateway",
	Description:      "Dilshod's API Gateway",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
