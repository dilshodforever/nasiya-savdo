// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: vocabularies.proto

package learning

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vocabulary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	LanguageCode    string `protobuf:"bytes,2,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Word            string `protobuf:"bytes,3,opt,name=word,proto3" json:"word,omitempty"`
	Translation     string `protobuf:"bytes,4,opt,name=translation,proto3" json:"translation,omitempty"`
	PartOfSpeech    string `protobuf:"bytes,5,opt,name=part_of_speech,json=partOfSpeech,proto3" json:"part_of_speech,omitempty"`
	ExampleSentence string `protobuf:"bytes,6,opt,name=example_sentence,json=exampleSentence,proto3" json:"example_sentence,omitempty"`
	AudioUrl        string `protobuf:"bytes,7,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
	CreatedAt       string `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Vocabulary) Reset() {
	*x = Vocabulary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vocabulary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vocabulary) ProtoMessage() {}

func (x *Vocabulary) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vocabulary.ProtoReflect.Descriptor instead.
func (*Vocabulary) Descriptor() ([]byte, []int) {
	return file_vocabularies_proto_rawDescGZIP(), []int{0}
}

func (x *Vocabulary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vocabulary) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *Vocabulary) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *Vocabulary) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *Vocabulary) GetPartOfSpeech() string {
	if x != nil {
		return x.PartOfSpeech
	}
	return ""
}

func (x *Vocabulary) GetExampleSentence() string {
	if x != nil {
		return x.ExampleSentence
	}
	return ""
}

func (x *Vocabulary) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

func (x *Vocabulary) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

type VocabularyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageCode    string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Word            string `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Translation     string `protobuf:"bytes,3,opt,name=translation,proto3" json:"translation,omitempty"`
	PartOfSpeech    string `protobuf:"bytes,4,opt,name=part_of_speech,json=partOfSpeech,proto3" json:"part_of_speech,omitempty"`
	ExampleSentence string `protobuf:"bytes,5,opt,name=example_sentence,json=exampleSentence,proto3" json:"example_sentence,omitempty"`
	AudioUrl        string `protobuf:"bytes,6,opt,name=audio_url,json=audioUrl,proto3" json:"audio_url,omitempty"`
}

func (x *VocabularyReq) Reset() {
	*x = VocabularyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VocabularyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocabularyReq) ProtoMessage() {}

func (x *VocabularyReq) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocabularyReq.ProtoReflect.Descriptor instead.
func (*VocabularyReq) Descriptor() ([]byte, []int) {
	return file_vocabularies_proto_rawDescGZIP(), []int{1}
}

func (x *VocabularyReq) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *VocabularyReq) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *VocabularyReq) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *VocabularyReq) GetPartOfSpeech() string {
	if x != nil {
		return x.PartOfSpeech
	}
	return ""
}

func (x *VocabularyReq) GetExampleSentence() string {
	if x != nil {
		return x.ExampleSentence
	}
	return ""
}

func (x *VocabularyReq) GetAudioUrl() string {
	if x != nil {
		return x.AudioUrl
	}
	return ""
}

type VocabularyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LanguageCode string `protobuf:"bytes,1,opt,name=language_code,json=languageCode,proto3" json:"language_code,omitempty"`
	Word         string `protobuf:"bytes,2,opt,name=word,proto3" json:"word,omitempty"`
	Translation  string `protobuf:"bytes,3,opt,name=translation,proto3" json:"translation,omitempty"`
	PartOfSpeech string `protobuf:"bytes,4,opt,name=part_of_speech,json=partOfSpeech,proto3" json:"part_of_speech,omitempty"`
	Limit        int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset       int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *VocabularyFilter) Reset() {
	*x = VocabularyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VocabularyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VocabularyFilter) ProtoMessage() {}

func (x *VocabularyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VocabularyFilter.ProtoReflect.Descriptor instead.
func (*VocabularyFilter) Descriptor() ([]byte, []int) {
	return file_vocabularies_proto_rawDescGZIP(), []int{2}
}

func (x *VocabularyFilter) GetLanguageCode() string {
	if x != nil {
		return x.LanguageCode
	}
	return ""
}

func (x *VocabularyFilter) GetWord() string {
	if x != nil {
		return x.Word
	}
	return ""
}

func (x *VocabularyFilter) GetTranslation() string {
	if x != nil {
		return x.Translation
	}
	return ""
}

func (x *VocabularyFilter) GetPartOfSpeech() string {
	if x != nil {
		return x.PartOfSpeech
	}
	return ""
}

func (x *VocabularyFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *VocabularyFilter) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AllVocabluaries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vocabluaries []*Vocabulary `protobuf:"bytes,1,rep,name=vocabluaries,proto3" json:"vocabluaries,omitempty"`
	Count        int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AllVocabluaries) Reset() {
	*x = AllVocabluaries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllVocabluaries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllVocabluaries) ProtoMessage() {}

func (x *AllVocabluaries) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllVocabluaries.ProtoReflect.Descriptor instead.
func (*AllVocabluaries) Descriptor() ([]byte, []int) {
	return file_vocabularies_proto_rawDescGZIP(), []int{3}
}

func (x *AllVocabluaries) GetVocabluaries() []*Vocabulary {
	if x != nil {
		return x.Vocabluaries
	}
	return nil
}

func (x *AllVocabluaries) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_vocabularies_proto protoreflect.FileDescriptor

var file_vocabularies_proto_rawDesc = []byte{
	0x0a, 0x12, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x1a, 0x0d, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd8, 0x01, 0x0a, 0x0d, 0x56, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x61, 0x72, 0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69, 0x6f,
	0x55, 0x72, 0x6c, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x6c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x65, 0x0a, 0x0f, 0x41, 0x6c, 0x6c, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x6c, 0x75, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x6c, 0x75, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x6c, 0x75, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xab,
	0x02, 0x0a, 0x11, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x1b,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x1a, 0x0d, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22,
	0x00, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6c, 0x65, 0x73,
	0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73,
	0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x18, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x1e, 0x2e, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a, 0x1d, 0x2e, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x6c, 0x75, 0x61, 0x72, 0x69, 0x65, 0x73, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12,
	0x67, 0x65, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_vocabularies_proto_rawDescOnce sync.Once
	file_vocabularies_proto_rawDescData = file_vocabularies_proto_rawDesc
)

func file_vocabularies_proto_rawDescGZIP() []byte {
	file_vocabularies_proto_rawDescOnce.Do(func() {
		file_vocabularies_proto_rawDescData = protoimpl.X.CompressGZIP(file_vocabularies_proto_rawDescData)
	})
	return file_vocabularies_proto_rawDescData
}

var file_vocabularies_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_vocabularies_proto_goTypes = []interface{}{
	(*Vocabulary)(nil),       // 0: vocabularies.Vocabulary
	(*VocabularyReq)(nil),    // 1: vocabularies.VocabularyReq
	(*VocabularyFilter)(nil), // 2: vocabularies.VocabularyFilter
	(*AllVocabluaries)(nil),  // 3: vocabularies.AllVocabluaries
	(*ById)(nil),             // 4: lessons.ById
	(*Void)(nil),             // 5: lessons.Void
}
var file_vocabularies_proto_depIdxs = []int32{
	0, // 0: vocabularies.AllVocabluaries.vocabluaries:type_name -> vocabularies.Vocabulary
	1, // 1: vocabularies.VocabularyService.Create:input_type -> vocabularies.VocabularyReq
	0, // 2: vocabularies.VocabularyService.Update:input_type -> vocabularies.Vocabulary
	4, // 3: vocabularies.VocabularyService.Delete:input_type -> lessons.ById
	4, // 4: vocabularies.VocabularyService.GetById:input_type -> lessons.ById
	2, // 5: vocabularies.VocabularyService.GetAll:input_type -> vocabularies.VocabularyFilter
	5, // 6: vocabularies.VocabularyService.Create:output_type -> lessons.Void
	5, // 7: vocabularies.VocabularyService.Update:output_type -> lessons.Void
	5, // 8: vocabularies.VocabularyService.Delete:output_type -> lessons.Void
	0, // 9: vocabularies.VocabularyService.GetById:output_type -> vocabularies.Vocabulary
	3, // 10: vocabularies.VocabularyService.GetAll:output_type -> vocabularies.AllVocabluaries
	6, // [6:11] is the sub-list for method output_type
	1, // [1:6] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_vocabularies_proto_init() }
func file_vocabularies_proto_init() {
	if File_vocabularies_proto != nil {
		return
	}
	file_lessons_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vocabularies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vocabulary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VocabularyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VocabularyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllVocabluaries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vocabularies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vocabularies_proto_goTypes,
		DependencyIndexes: file_vocabularies_proto_depIdxs,
		MessageInfos:      file_vocabularies_proto_msgTypes,
	}.Build()
	File_vocabularies_proto = out.File
	file_vocabularies_proto_rawDesc = nil
	file_vocabularies_proto_goTypes = nil
	file_vocabularies_proto_depIdxs = nil
}
