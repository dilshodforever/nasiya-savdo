// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        v3.12.4
// source: user_vocabularies.proto

package learning

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserVocabulary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId         string      `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Vocabulary     *Vocabulary `protobuf:"bytes,3,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
	LearnedAt      string      `protobuf:"bytes,4,opt,name=learned_at,json=learnedAt,proto3" json:"learned_at,omitempty"`
	LastReviewedAt string      `protobuf:"bytes,5,opt,name=last_reviewed_at,json=lastReviewedAt,proto3" json:"last_reviewed_at,omitempty"`
	MasteryLevel   int32       `protobuf:"varint,6,opt,name=mastery_level,json=masteryLevel,proto3" json:"mastery_level,omitempty"`
}

func (x *UserVocabulary) Reset() {
	*x = UserVocabulary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_vocabularies_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVocabulary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVocabulary) ProtoMessage() {}

func (x *UserVocabulary) ProtoReflect() protoreflect.Message {
	mi := &file_user_vocabularies_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVocabulary.ProtoReflect.Descriptor instead.
func (*UserVocabulary) Descriptor() ([]byte, []int) {
	return file_user_vocabularies_proto_rawDescGZIP(), []int{0}
}

func (x *UserVocabulary) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserVocabulary) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserVocabulary) GetVocabulary() *Vocabulary {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

func (x *UserVocabulary) GetLearnedAt() string {
	if x != nil {
		return x.LearnedAt
	}
	return ""
}

func (x *UserVocabulary) GetLastReviewedAt() string {
	if x != nil {
		return x.LastReviewedAt
	}
	return ""
}

func (x *UserVocabulary) GetMasteryLevel() int32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

type UserVocabularyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VocabularyId   string `protobuf:"bytes,2,opt,name=vocabulary_id,json=vocabularyId,proto3" json:"vocabulary_id,omitempty"`
	LearnedAt      string `protobuf:"bytes,3,opt,name=learned_at,json=learnedAt,proto3" json:"learned_at,omitempty"`
	LastReviewedAt string `protobuf:"bytes,4,opt,name=last_reviewed_at,json=lastReviewedAt,proto3" json:"last_reviewed_at,omitempty"`
	MasteryLevel   int32  `protobuf:"varint,5,opt,name=mastery_level,json=masteryLevel,proto3" json:"mastery_level,omitempty"`
}

func (x *UserVocabularyReq) Reset() {
	*x = UserVocabularyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_vocabularies_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVocabularyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVocabularyReq) ProtoMessage() {}

func (x *UserVocabularyReq) ProtoReflect() protoreflect.Message {
	mi := &file_user_vocabularies_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVocabularyReq.ProtoReflect.Descriptor instead.
func (*UserVocabularyReq) Descriptor() ([]byte, []int) {
	return file_user_vocabularies_proto_rawDescGZIP(), []int{1}
}

func (x *UserVocabularyReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserVocabularyReq) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *UserVocabularyReq) GetLearnedAt() string {
	if x != nil {
		return x.LearnedAt
	}
	return ""
}

func (x *UserVocabularyReq) GetLastReviewedAt() string {
	if x != nil {
		return x.LastReviewedAt
	}
	return ""
}

func (x *UserVocabularyReq) GetMasteryLevel() int32 {
	if x != nil {
		return x.MasteryLevel
	}
	return 0
}

type UserVocabularyFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId         string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	VocabularyId   string `protobuf:"bytes,2,opt,name=vocabulary_id,json=vocabularyId,proto3" json:"vocabulary_id,omitempty"`
	LearnedAt      string `protobuf:"bytes,3,opt,name=learned_at,json=learnedAt,proto3" json:"learned_at,omitempty"`
	LastReviewedAt string `protobuf:"bytes,4,opt,name=last_reviewed_at,json=lastReviewedAt,proto3" json:"last_reviewed_at,omitempty"`
	Limit          int32  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset         int32  `protobuf:"varint,6,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *UserVocabularyFilter) Reset() {
	*x = UserVocabularyFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_vocabularies_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVocabularyFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVocabularyFilter) ProtoMessage() {}

func (x *UserVocabularyFilter) ProtoReflect() protoreflect.Message {
	mi := &file_user_vocabularies_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVocabularyFilter.ProtoReflect.Descriptor instead.
func (*UserVocabularyFilter) Descriptor() ([]byte, []int) {
	return file_user_vocabularies_proto_rawDescGZIP(), []int{2}
}

func (x *UserVocabularyFilter) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserVocabularyFilter) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *UserVocabularyFilter) GetLearnedAt() string {
	if x != nil {
		return x.LearnedAt
	}
	return ""
}

func (x *UserVocabularyFilter) GetLastReviewedAt() string {
	if x != nil {
		return x.LastReviewedAt
	}
	return ""
}

func (x *UserVocabularyFilter) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *UserVocabularyFilter) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type AllUserVocabulary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserVocabulary []*UserVocabulary `protobuf:"bytes,1,rep,name=user_vocabulary,json=userVocabulary,proto3" json:"user_vocabulary,omitempty"`
	Count          int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AllUserVocabulary) Reset() {
	*x = AllUserVocabulary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_user_vocabularies_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllUserVocabulary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllUserVocabulary) ProtoMessage() {}

func (x *AllUserVocabulary) ProtoReflect() protoreflect.Message {
	mi := &file_user_vocabularies_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllUserVocabulary.ProtoReflect.Descriptor instead.
func (*AllUserVocabulary) Descriptor() ([]byte, []int) {
	return file_user_vocabularies_proto_rawDescGZIP(), []int{3}
}

func (x *AllUserVocabulary) GetUserVocabulary() []*UserVocabulary {
	if x != nil {
		return x.UserVocabulary
	}
	return nil
}

func (x *AllUserVocabulary) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_user_vocabularies_proto protoreflect.FileDescriptor

var file_user_vocabularies_proto_rawDesc = []byte{
	0x0a, 0x17, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x1a, 0x0d, 0x6c, 0x65,
	0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe1, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x23,
	0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x65, 0x61, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x65, 0x61,
	0x72, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x61, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x65, 0x64, 0x41, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x22, 0x75, 0x0a, 0x11, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0f, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0xda, 0x02, 0x0a, 0x15, 0x55,
	0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x1a, 0x0d, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d, 0x2e,
	0x6c, 0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x0d, 0x2e, 0x6c,
	0x65, 0x73, 0x73, 0x6f, 0x6e, 0x73, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x0d, 0x2e, 0x6c, 0x65, 0x73, 0x73, 0x6f,
	0x6e, 0x73, 0x2e, 0x42, 0x79, 0x49, 0x64, 0x1a, 0x21, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x27, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x1a,
	0x24, 0x2e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x69, 0x65, 0x73, 0x2e, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x67, 0x65, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x65, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_user_vocabularies_proto_rawDescOnce sync.Once
	file_user_vocabularies_proto_rawDescData = file_user_vocabularies_proto_rawDesc
)

func file_user_vocabularies_proto_rawDescGZIP() []byte {
	file_user_vocabularies_proto_rawDescOnce.Do(func() {
		file_user_vocabularies_proto_rawDescData = protoimpl.X.CompressGZIP(file_user_vocabularies_proto_rawDescData)
	})
	return file_user_vocabularies_proto_rawDescData
}

var file_user_vocabularies_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_user_vocabularies_proto_goTypes = []interface{}{
	(*UserVocabulary)(nil),       // 0: user_vocabularies.UserVocabulary
	(*UserVocabularyReq)(nil),    // 1: user_vocabularies.UserVocabularyReq
	(*UserVocabularyFilter)(nil), // 2: user_vocabularies.UserVocabularyFilter
	(*AllUserVocabulary)(nil),    // 3: user_vocabularies.AllUserVocabulary
	(*Vocabulary)(nil),           // 4: vocabularies.Vocabulary
	(*ById)(nil),                 // 5: lessons.ById
	(*Void)(nil),                 // 6: lessons.Void
}
var file_user_vocabularies_proto_depIdxs = []int32{
	4, // 0: user_vocabularies.UserVocabulary.vocabulary:type_name -> vocabularies.Vocabulary
	0, // 1: user_vocabularies.AllUserVocabulary.user_vocabulary:type_name -> user_vocabularies.UserVocabulary
	1, // 2: user_vocabularies.UserVocabularyService.Create:input_type -> user_vocabularies.UserVocabularyReq
	0, // 3: user_vocabularies.UserVocabularyService.Update:input_type -> user_vocabularies.UserVocabulary
	5, // 4: user_vocabularies.UserVocabularyService.Delete:input_type -> lessons.ById
	5, // 5: user_vocabularies.UserVocabularyService.GetById:input_type -> lessons.ById
	2, // 6: user_vocabularies.UserVocabularyService.GetAll:input_type -> user_vocabularies.UserVocabularyFilter
	6, // 7: user_vocabularies.UserVocabularyService.Create:output_type -> lessons.Void
	6, // 8: user_vocabularies.UserVocabularyService.Update:output_type -> lessons.Void
	6, // 9: user_vocabularies.UserVocabularyService.Delete:output_type -> lessons.Void
	0, // 10: user_vocabularies.UserVocabularyService.GetById:output_type -> user_vocabularies.UserVocabulary
	3, // 11: user_vocabularies.UserVocabularyService.GetAll:output_type -> user_vocabularies.AllUserVocabulary
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_user_vocabularies_proto_init() }
func file_user_vocabularies_proto_init() {
	if File_user_vocabularies_proto != nil {
		return
	}
	file_lessons_proto_init()
	file_vocabularies_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_user_vocabularies_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVocabulary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_vocabularies_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVocabularyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_vocabularies_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVocabularyFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_user_vocabularies_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllUserVocabulary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_user_vocabularies_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_user_vocabularies_proto_goTypes,
		DependencyIndexes: file_user_vocabularies_proto_depIdxs,
		MessageInfos:      file_user_vocabularies_proto_msgTypes,
	}.Build()
	File_user_vocabularies_proto = out.File
	file_user_vocabularies_proto_rawDesc = nil
	file_user_vocabularies_proto_goTypes = nil
	file_user_vocabularies_proto_depIdxs = nil
}
