// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user_vocabularies.proto

package learning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserVocabularyService_Create_FullMethodName  = "/user_vocabularies.UserVocabularyService/Create"
	UserVocabularyService_Update_FullMethodName  = "/user_vocabularies.UserVocabularyService/Update"
	UserVocabularyService_Delete_FullMethodName  = "/user_vocabularies.UserVocabularyService/Delete"
	UserVocabularyService_GetById_FullMethodName = "/user_vocabularies.UserVocabularyService/GetById"
	UserVocabularyService_GetAll_FullMethodName  = "/user_vocabularies.UserVocabularyService/GetAll"
)

// UserVocabularyServiceClient is the client API for UserVocabularyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserVocabularyServiceClient interface {
	Create(ctx context.Context, in *UserVocabularyReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *UserVocabulary, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserVocabulary, error)
	GetAll(ctx context.Context, in *UserVocabularyFilter, opts ...grpc.CallOption) (*AllUserVocabulary, error)
}

type userVocabularyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserVocabularyServiceClient(cc grpc.ClientConnInterface) UserVocabularyServiceClient {
	return &userVocabularyServiceClient{cc}
}

func (c *userVocabularyServiceClient) Create(ctx context.Context, in *UserVocabularyReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserVocabularyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userVocabularyServiceClient) Update(ctx context.Context, in *UserVocabulary, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserVocabularyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userVocabularyServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserVocabularyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userVocabularyServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserVocabulary, error) {
	out := new(UserVocabulary)
	err := c.cc.Invoke(ctx, UserVocabularyService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userVocabularyServiceClient) GetAll(ctx context.Context, in *UserVocabularyFilter, opts ...grpc.CallOption) (*AllUserVocabulary, error) {
	out := new(AllUserVocabulary)
	err := c.cc.Invoke(ctx, UserVocabularyService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserVocabularyServiceServer is the server API for UserVocabularyService service.
// All implementations must embed UnimplementedUserVocabularyServiceServer
// for forward compatibility
type UserVocabularyServiceServer interface {
	Create(context.Context, *UserVocabularyReq) (*Void, error)
	Update(context.Context, *UserVocabulary) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetById(context.Context, *ById) (*UserVocabulary, error)
	GetAll(context.Context, *UserVocabularyFilter) (*AllUserVocabulary, error)
	mustEmbedUnimplementedUserVocabularyServiceServer()
}

// UnimplementedUserVocabularyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserVocabularyServiceServer struct {
}

func (UnimplementedUserVocabularyServiceServer) Create(context.Context, *UserVocabularyReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserVocabularyServiceServer) Update(context.Context, *UserVocabulary) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserVocabularyServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserVocabularyServiceServer) GetById(context.Context, *ById) (*UserVocabulary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserVocabularyServiceServer) GetAll(context.Context, *UserVocabularyFilter) (*AllUserVocabulary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserVocabularyServiceServer) mustEmbedUnimplementedUserVocabularyServiceServer() {}

// UnsafeUserVocabularyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserVocabularyServiceServer will
// result in compilation errors.
type UnsafeUserVocabularyServiceServer interface {
	mustEmbedUnimplementedUserVocabularyServiceServer()
}

func RegisterUserVocabularyServiceServer(s grpc.ServiceRegistrar, srv UserVocabularyServiceServer) {
	s.RegisterService(&UserVocabularyService_ServiceDesc, srv)
}

func _UserVocabularyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVocabularyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVocabularyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVocabularyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVocabularyServiceServer).Create(ctx, req.(*UserVocabularyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserVocabularyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVocabulary)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVocabularyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVocabularyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVocabularyServiceServer).Update(ctx, req.(*UserVocabulary))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserVocabularyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVocabularyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVocabularyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVocabularyServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserVocabularyService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVocabularyServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVocabularyService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVocabularyServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserVocabularyService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserVocabularyFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserVocabularyServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserVocabularyService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserVocabularyServiceServer).GetAll(ctx, req.(*UserVocabularyFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// UserVocabularyService_ServiceDesc is the grpc.ServiceDesc for UserVocabularyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserVocabularyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_vocabularies.UserVocabularyService",
	HandlerType: (*UserVocabularyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserVocabularyService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserVocabularyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserVocabularyService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserVocabularyService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserVocabularyService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_vocabularies.proto",
}
