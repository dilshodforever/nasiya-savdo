// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user_languages.proto

package learning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserLanguageService_Create_FullMethodName  = "/user_languages.UserLanguageService/Create"
	UserLanguageService_Update_FullMethodName  = "/user_languages.UserLanguageService/Update"
	UserLanguageService_Delete_FullMethodName  = "/user_languages.UserLanguageService/Delete"
	UserLanguageService_GetById_FullMethodName = "/user_languages.UserLanguageService/GetById"
	UserLanguageService_GetAll_FullMethodName  = "/user_languages.UserLanguageService/GetAll"
)

// UserLanguageServiceClient is the client API for UserLanguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLanguageServiceClient interface {
	Create(ctx context.Context, in *UserLanguageReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *UserLanguage, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserLanguage, error)
	GetAll(ctx context.Context, in *UserLanguageFilter, opts ...grpc.CallOption) (*AllUserLanguages, error)
}

type userLanguageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLanguageServiceClient(cc grpc.ClientConnInterface) UserLanguageServiceClient {
	return &userLanguageServiceClient{cc}
}

func (c *userLanguageServiceClient) Create(ctx context.Context, in *UserLanguageReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserLanguageService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLanguageServiceClient) Update(ctx context.Context, in *UserLanguage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserLanguageService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLanguageServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserLanguageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLanguageServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserLanguage, error) {
	out := new(UserLanguage)
	err := c.cc.Invoke(ctx, UserLanguageService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLanguageServiceClient) GetAll(ctx context.Context, in *UserLanguageFilter, opts ...grpc.CallOption) (*AllUserLanguages, error) {
	out := new(AllUserLanguages)
	err := c.cc.Invoke(ctx, UserLanguageService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLanguageServiceServer is the server API for UserLanguageService service.
// All implementations must embed UnimplementedUserLanguageServiceServer
// for forward compatibility
type UserLanguageServiceServer interface {
	Create(context.Context, *UserLanguageReq) (*Void, error)
	Update(context.Context, *UserLanguage) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetById(context.Context, *ById) (*UserLanguage, error)
	GetAll(context.Context, *UserLanguageFilter) (*AllUserLanguages, error)
	mustEmbedUnimplementedUserLanguageServiceServer()
}

// UnimplementedUserLanguageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserLanguageServiceServer struct {
}

func (UnimplementedUserLanguageServiceServer) Create(context.Context, *UserLanguageReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserLanguageServiceServer) Update(context.Context, *UserLanguage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserLanguageServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserLanguageServiceServer) GetById(context.Context, *ById) (*UserLanguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserLanguageServiceServer) GetAll(context.Context, *UserLanguageFilter) (*AllUserLanguages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserLanguageServiceServer) mustEmbedUnimplementedUserLanguageServiceServer() {}

// UnsafeUserLanguageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLanguageServiceServer will
// result in compilation errors.
type UnsafeUserLanguageServiceServer interface {
	mustEmbedUnimplementedUserLanguageServiceServer()
}

func RegisterUserLanguageServiceServer(s grpc.ServiceRegistrar, srv UserLanguageServiceServer) {
	s.RegisterService(&UserLanguageService_ServiceDesc, srv)
}

func _UserLanguageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLanguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLanguageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLanguageService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLanguageServiceServer).Create(ctx, req.(*UserLanguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLanguageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLanguage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLanguageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLanguageService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLanguageServiceServer).Update(ctx, req.(*UserLanguage))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLanguageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLanguageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLanguageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLanguageServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLanguageService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLanguageServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLanguageService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLanguageServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLanguageService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLanguageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLanguageServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserLanguageService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLanguageServiceServer).GetAll(ctx, req.(*UserLanguageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLanguageService_ServiceDesc is the grpc.ServiceDesc for UserLanguageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLanguageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_languages.UserLanguageService",
	HandlerType: (*UserLanguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserLanguageService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserLanguageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserLanguageService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserLanguageService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserLanguageService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_languages.proto",
}
