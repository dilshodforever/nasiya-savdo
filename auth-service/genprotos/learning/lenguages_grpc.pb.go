// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: lenguages.proto

package learning

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LenguageService_Create_FullMethodName  = "/lenguages.LenguageService/Create"
	LenguageService_Update_FullMethodName  = "/lenguages.LenguageService/Update"
	LenguageService_Delete_FullMethodName  = "/lenguages.LenguageService/Delete"
	LenguageService_GetById_FullMethodName = "/lenguages.LenguageService/GetById"
	LenguageService_GetAll_FullMethodName  = "/lenguages.LenguageService/GetAll"
)

// LenguageServiceClient is the client API for LenguageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LenguageServiceClient interface {
	Create(ctx context.Context, in *LenguageReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *Lenguage, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Lenguage, error)
	GetAll(ctx context.Context, in *LenguageFilter, opts ...grpc.CallOption) (*AllLenguages, error)
}

type lenguageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLenguageServiceClient(cc grpc.ClientConnInterface) LenguageServiceClient {
	return &lenguageServiceClient{cc}
}

func (c *lenguageServiceClient) Create(ctx context.Context, in *LenguageReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LenguageService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lenguageServiceClient) Update(ctx context.Context, in *Lenguage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LenguageService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lenguageServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, LenguageService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lenguageServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Lenguage, error) {
	out := new(Lenguage)
	err := c.cc.Invoke(ctx, LenguageService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lenguageServiceClient) GetAll(ctx context.Context, in *LenguageFilter, opts ...grpc.CallOption) (*AllLenguages, error) {
	out := new(AllLenguages)
	err := c.cc.Invoke(ctx, LenguageService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LenguageServiceServer is the server API for LenguageService service.
// All implementations must embed UnimplementedLenguageServiceServer
// for forward compatibility
type LenguageServiceServer interface {
	Create(context.Context, *LenguageReq) (*Void, error)
	Update(context.Context, *Lenguage) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetById(context.Context, *ById) (*Lenguage, error)
	GetAll(context.Context, *LenguageFilter) (*AllLenguages, error)
	mustEmbedUnimplementedLenguageServiceServer()
}

// UnimplementedLenguageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLenguageServiceServer struct {
}

func (UnimplementedLenguageServiceServer) Create(context.Context, *LenguageReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedLenguageServiceServer) Update(context.Context, *Lenguage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedLenguageServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedLenguageServiceServer) GetById(context.Context, *ById) (*Lenguage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedLenguageServiceServer) GetAll(context.Context, *LenguageFilter) (*AllLenguages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedLenguageServiceServer) mustEmbedUnimplementedLenguageServiceServer() {}

// UnsafeLenguageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LenguageServiceServer will
// result in compilation errors.
type UnsafeLenguageServiceServer interface {
	mustEmbedUnimplementedLenguageServiceServer()
}

func RegisterLenguageServiceServer(s grpc.ServiceRegistrar, srv LenguageServiceServer) {
	s.RegisterService(&LenguageService_ServiceDesc, srv)
}

func _LenguageService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LenguageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LenguageServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LenguageService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LenguageServiceServer).Create(ctx, req.(*LenguageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LenguageService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lenguage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LenguageServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LenguageService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LenguageServiceServer).Update(ctx, req.(*Lenguage))
	}
	return interceptor(ctx, in, info, handler)
}

func _LenguageService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LenguageServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LenguageService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LenguageServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _LenguageService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LenguageServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LenguageService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LenguageServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _LenguageService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LenguageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LenguageServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LenguageService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LenguageServiceServer).GetAll(ctx, req.(*LenguageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// LenguageService_ServiceDesc is the grpc.ServiceDesc for LenguageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LenguageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lenguages.LenguageService",
	HandlerType: (*LenguageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _LenguageService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _LenguageService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _LenguageService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _LenguageService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _LenguageService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lenguages.proto",
}
