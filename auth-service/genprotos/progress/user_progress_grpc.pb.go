// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: user_progress.proto

package progress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserProgressService_Create_FullMethodName  = "/user_progress.UserProgressService/Create"
	UserProgressService_Update_FullMethodName  = "/user_progress.UserProgressService/Update"
	UserProgressService_Delete_FullMethodName  = "/user_progress.UserProgressService/Delete"
	UserProgressService_GetById_FullMethodName = "/user_progress.UserProgressService/GetById"
	UserProgressService_GetAll_FullMethodName  = "/user_progress.UserProgressService/GetAll"
)

// UserProgressServiceClient is the client API for UserProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProgressServiceClient interface {
	Create(ctx context.Context, in *UserProgressReq, opts ...grpc.CallOption) (*Void, error)
	Update(ctx context.Context, in *UserProgress, opts ...grpc.CallOption) (*Void, error)
	Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error)
	GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserProgress, error)
	GetAll(ctx context.Context, in *UserProgressFilter, opts ...grpc.CallOption) (*AllUserProgress, error)
}

type userProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProgressServiceClient(cc grpc.ClientConnInterface) UserProgressServiceClient {
	return &userProgressServiceClient{cc}
}

func (c *userProgressServiceClient) Create(ctx context.Context, in *UserProgressReq, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserProgressService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) Update(ctx context.Context, in *UserProgress, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserProgressService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) Delete(ctx context.Context, in *ById, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, UserProgressService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) GetById(ctx context.Context, in *ById, opts ...grpc.CallOption) (*UserProgress, error) {
	out := new(UserProgress)
	err := c.cc.Invoke(ctx, UserProgressService_GetById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressServiceClient) GetAll(ctx context.Context, in *UserProgressFilter, opts ...grpc.CallOption) (*AllUserProgress, error) {
	out := new(AllUserProgress)
	err := c.cc.Invoke(ctx, UserProgressService_GetAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProgressServiceServer is the server API for UserProgressService service.
// All implementations must embed UnimplementedUserProgressServiceServer
// for forward compatibility
type UserProgressServiceServer interface {
	Create(context.Context, *UserProgressReq) (*Void, error)
	Update(context.Context, *UserProgress) (*Void, error)
	Delete(context.Context, *ById) (*Void, error)
	GetById(context.Context, *ById) (*UserProgress, error)
	GetAll(context.Context, *UserProgressFilter) (*AllUserProgress, error)
	mustEmbedUnimplementedUserProgressServiceServer()
}

// UnimplementedUserProgressServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserProgressServiceServer struct {
}

func (UnimplementedUserProgressServiceServer) Create(context.Context, *UserProgressReq) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUserProgressServiceServer) Update(context.Context, *UserProgress) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedUserProgressServiceServer) Delete(context.Context, *ById) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedUserProgressServiceServer) GetById(context.Context, *ById) (*UserProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedUserProgressServiceServer) GetAll(context.Context, *UserProgressFilter) (*AllUserProgress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedUserProgressServiceServer) mustEmbedUnimplementedUserProgressServiceServer() {}

// UnsafeUserProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProgressServiceServer will
// result in compilation errors.
type UnsafeUserProgressServiceServer interface {
	mustEmbedUnimplementedUserProgressServiceServer()
}

func RegisterUserProgressServiceServer(s grpc.ServiceRegistrar, srv UserProgressServiceServer) {
	s.RegisterService(&UserProgressService_ServiceDesc, srv)
}

func _UserProgressService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProgressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).Create(ctx, req.(*UserProgressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProgress)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).Update(ctx, req.(*UserProgress))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).Delete(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ById)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetById(ctx, req.(*ById))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressService_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProgressFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressServiceServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressService_GetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressServiceServer).GetAll(ctx, req.(*UserProgressFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProgressService_ServiceDesc is the grpc.ServiceDesc for UserProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_progress.UserProgressService",
	HandlerType: (*UserProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UserProgressService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _UserProgressService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _UserProgressService_Delete_Handler,
		},
		{
			MethodName: "GetById",
			Handler:    _UserProgressService_GetById_Handler,
		},
		{
			MethodName: "GetAll",
			Handler:    _UserProgressService_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user_progress.proto",
}
